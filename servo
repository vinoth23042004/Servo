import cv2
import pygame
import numpy as np
import time
import random
from cvzone.FaceDetectionModule import FaceDetector
import RPi.GPIO as GPIO

# --- GPIO Setup ---
GPIO.setmode(GPIO.BOARD)
SERVO_PIN_X = 13
SERVO_PIN_Y = 12
GPIO.setup(SERVO_PIN_X, GPIO.OUT)
GPIO.setup(SERVO_PIN_Y, GPIO.OUT)

pwmX = GPIO.PWM(SERVO_PIN_X, 50)  # 50Hz
pwmY = GPIO.PWM(SERVO_PIN_Y, 50)

def angle_to_duty(angle):
    return 2 + (angle / 18)

def move_servo(x_angle, y_angle):
    pwmX.ChangeDutyCycle(angle_to_duty(x_angle))
    pwmY.ChangeDutyCycle(angle_to_duty(y_angle))

pwmX.start(0)
pwmY.start(0)
REST_POS = [90, 90]
move_servo(*REST_POS)  # Set to rest on startup
time.sleep(1)

# --- OpenCV Setup ---
cap = cv2.VideoCapture(0)
cap.set(3, 640)
cap.set(4, 480)
cap.set(cv2.CAP_PROP_FPS, 30)
face_detector = FaceDetector()
ws, hs = 640, 480

# --- Pygame Setup ---
pygame.init()
WIDTH, HEIGHT = 800, 600
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("AI Emotion Eyes")

BLACK = (0, 0, 0)
BLUE = (0, 170, 255)
DARK_BLUE = (0, 120, 200)
RED = (255, 0, 0)
GREEN = (0, 255, 0)
YELLOW = (255, 255, 0)

eye_left = [280, 300]
eye_right = [520, 300]
eye_size = 100
movement_range = 60
speed = 0.5

last_blink = time.time()
blink_duration = 0.1
blink_interval = random.randint(3, 6)
is_blinking = False

emotions = ["neutral", "happy", "sad", "angry", "surprised"]
current_emotion = "neutral"
last_emotion_change = time.time()
emotion_change_interval = 5

servoPos = REST_POS.copy()
running = True

try:
    while running:
        screen.fill(BLACK)

        success, img = cap.read()
        img, bboxs = face_detector.findFaces(img, draw=False)

        if bboxs:
            fx, fy = bboxs[0]["center"]
            pos = [fx, fy]

            # --- Eye Tracking ---
            target_eyeX = np.interp(fx, [100, 540], [movement_range, -movement_range])
            target_eyeY = np.interp(fy, [50, 430], [movement_range, -movement_range])

            eye_left[0] += (280 + target_eyeX - eye_left[0]) * speed
            eye_left[1] += (300 + target_eyeY - eye_left[1]) * speed
            eye_right[0] += (520 + target_eyeX - eye_right[0]) * speed
            eye_right[1] += (300 + target_eyeY - eye_right[1]) * speed

            # --- Servo Tracking ---
            servoX = np.interp(fx, [0, ws], [180, 0])
            servoY = np.interp(fy, [0, hs], [180, 0])

            servoX = max(0, min(180, servoX))
            servoY = max(0, min(180, servoY))

            if abs(servoPos[0] - servoX) > 1 or abs(servoPos[1] - servoY) > 1:
                servoPos[0] = servoX
                servoPos[1] = servoY
                move_servo(servoX, servoY)
        else:
            # No face, return to rest position
            move_servo(*REST_POS)
            servoPos = REST_POS.copy()

        # --- Blinking Logic ---
        current_time = time.time()
        if current_time - last_blink >= blink_interval:
            is_blinking = True
            last_blink = current_time
            blink_interval = random.randint(3, 6)
        if is_blinking and current_time - last_blink >= blink_duration:
            is_blinking = False

        # --- Emotion Switch ---
        if current_time - last_emotion_change >= emotion_change_interval:
            current_emotion = random.choice(emotions)
            last_emotion_change = current_time

        # --- Emotion Appearance ---
        if current_emotion == "happy":
            eye_color = GREEN
            border_radius = 30
        elif current_emotion == "sad":
            eye_color = BLUE
            border_radius = 10
        elif current_emotion == "angry":
            eye_color = RED
            border_radius = 5
        elif current_emotion == "surprised":
            eye_color = YELLOW
            border_radius = 40
        else:
            eye_color = DARK_BLUE
            border_radius = 20

        # --- Draw Eyes ---
        if not is_blinking:
            pygame.draw.rect(screen, eye_color, (eye_left[0]-eye_size//2, eye_left[1]-eye_size//2, eye_size, eye_size), border_radius=border_radius)
            pygame.draw.rect(screen, eye_color, (eye_right[0]-eye_size//2, eye_right[1]-eye_size//2, eye_size, eye_size), border_radius=border_radius)
            pygame.draw.rect(screen, BLUE, (eye_left[0]-eye_size//2+10, eye_left[1]-eye_size//2+10, eye_size-20, eye_size-20), border_radius=border_radius)
            pygame.draw.rect(screen, BLUE, (eye_right[0]-eye_size//2+10, eye_right[1]-eye_size//2+10, eye_size-20, eye_size-20), border_radius=border_radius)
        else:
            pygame.draw.rect(screen, DARK_BLUE, (eye_left[0]-eye_size//2, eye_left[1]-5, eye_size, 10), border_radius=5)
            pygame.draw.rect(screen, DARK_BLUE, (eye_right[0]-eye_size//2, eye_right[1]-5, eye_size, 10), border_radius=5)

        pygame.display.flip()

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False

finally:
    # --- Cleanup ---
    move_servo(*REST_POS)
    time.sleep(1)
    pwmX.stop()
    pwmY.stop()
    GPIO.cleanup()
    cap.release()
    pygame.quit()
